{{- if .Values.ingress.url }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "brokencrystals.fullname" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    nginx.ingress.kubernetes.io/proxy-ssl-protocols: "TLSv1.1 TLSv1.2"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    {{- if eq .Values.ingress.cert "" }}
    cert-manager.io/cluster-issuer: letsencrypt-cf-prod
    {{- end }}
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ .Values.ingress.url }}
      secretName: {{ if eq .Values.ingress.cert "" }}{{ include "brokencrystals.fullname" . }}-brokencrystals-secret{{ else }}{{ .Values.ingress.cert }}{{ end }}
  rules:
    - host: {{ .Values.ingress.url }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Release.Name }}
                port:
                  number: 80
{{- end }}

{{- if .Values.ingress.url }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "brokencrystals.fullname" . }}-keycloak
  namespace: {{ .Release.Namespace }}
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-ssl-protocols: "TLSv1.1 TLSv1.2"
    {{- if eq .Values.ingress.cert "" }}
    cert-manager.io/cluster-issuer: letsencrypt-cf-prod
    {{- end }}
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - auth{{ .Values.ingress.authlevel }}{{ .Values.ingress.url }}
      secretName: {{ if eq .Values.ingress.cert "" }}{{ include "brokencrystals.fullname" . }}-brokencrystals-keycloak-secret{{ else }}{{ .Values.ingress.cert }}{{ end }}
  rules:
    - host: auth{{ .Values.ingress.authlevel }}{{ .Values.ingress.url }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Release.Name }}-keycloak
                port:
                  number: 8080
{{- end }}
